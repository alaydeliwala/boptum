package database.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import database.data.Patient;
import database.data.Provider;
import database.PatientRepository;
import database.ProviderRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/patient") // This means URL's start with /patient (after Application path)
public class PatientController {
	@Autowired // This means to get the bean called patientRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PatientRepository patientRepository;

	@Autowired
	private ProviderRepository providerRepository;

	/**
	 * Adds a user to the database
	 * 
	 * @param username the username
	 * @param password the password
	 * @param name the name
	 * @param email the email
	 * @param phone the phone number
	 */
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser ( @RequestParam String name, @RequestParam String email, @RequestParam String phone) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Patient newPatient = new Patient(name,email,phone);
		patientRepository.save(newPatient);
		return "New patient has been added\n";
	}

	// /**
	//  * Adds a user to the database
	//  * 
	//  * @param username the username
	//  * @param password the password
	//  * @param name the name
	//  * @param email the email
	//  * @param phone the phone number
	//  */
	// @GetMapping(path="/addWithProvider") // Map ONLY GET Requests
	// public @ResponseBody String addNewUserWithProvider (@RequestParam String username
	// 		, @RequestParam String password, @RequestParam String name, @RequestParam String email, @RequestParam String phone, @RequestParam Integer id) {
	// 	// @ResponseBody means the returned String is the response, not a view name
	// 	// @RequestParam means it is a parameter from the GET or POST request
	// 	Provider provider = providerRepository.findById(id).get();
	// 	if(provider != null){
	// 		User newPatient = new User(username,password,name,email,phone,provider);
	// 		userRepository.save(newPatient);
	// 		return "New patient has been added\n";
	// 	} else {
	// 		return "User was not able to be added";
	// 	}
		
	// }

	/**
	 * A method to find a user based on their name
	 * 
	 * @param name the name of the user
	 * @return the user with the specfied name
	 */
	@GetMapping(path="/find") // Map ONLY GET Requests
	public @ResponseBody Patient findUser (@RequestParam String name) {
		Iterable<Patient> users = patientRepository.findAll();
		for (Patient item: users){
			if (item.getName().equals(name)){
				return item;
			}
		}
		// Make sure to catch this null
		return new Patient();

	}

	/**
	 * Gets a list of all the users in the databse
	 * 
	 * @return the list of users
	 */
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Patient> getAllUsers() {
		// This returns a JSON or XML with the users
		return patientRepository.findAll();
	}

	// /**
	//  * Gets the data for the current user
	//  * 
	//  * @return the current users data
	//  */
	// @GetMapping(path="/user/updateProvider")
	// public @ResponseBody String updateProvider(@RequestParam Integer id){

	// 	Provider provider = providerRepository.findById(id).get();
	// 	if(provider != null){
	// 		User newUser = userRepository.findById(currentUser.getId()).get();
	// 		newUser.setProvider(provider);
	// 		userRepository.deleteById(currentUser.getId());
	// 		userRepository.save(newUser);
	// 		return "Succesful";
	// 	}
	// 	return "Unsuccesful";
	// }
}